 Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();
                                            Collection<Object> colection = map.values();
                                            Iterator iter =  colection.iterator();
                                            Object userInfoObject = iter.next();
                                            HashMap<String,String> hmUserinfo = (HashMap<String, String>) userInfoObject;
                                            UserInfo userInfo = new UserInfo(hmUserinfo.get("username"),hmUserinfo.get("name"),hmUserinfo.get("surname"),hmUserinfo.get("number"),hmUserinfo.get("email"),hmUserinfo.get("type"),hmUserinfo.get("password"));
                                            FireBase.getInstance().setUserInfo(userInfo);



Map<String, Object> rezHM = (Map<String, Object>) dataSnapshot.getValue();
               // Collection<Object> colection = map.values();
               //Iterator iter =  colection.iterator();
               // Object rez = iter.next();
               // HashMap<String,Object> rezHM = (HashMap<String, Object>) rez;
                Rezervation currRezervation = new Rezervation((String)rezHM.get("time"),(String)rezHM.get("name_user"),(Integer)rezHM.get("price"),
                        (Integer) rezHM.get("numberTable"),(Boolean) rezHM.get("paidOrNot"),(String)rezHM.get("password"),(String)rezHM.get("username"),
                        (String)rezHM.get("nameType"),(Integer)rezHM.get("id")  );



    public class ItemForRezervationsList extends HolderAdapterItem {
        Rezervation rezervation;



        public ItemForRezervationsList(Rezervation ld){

            rezervation = ld;

        }
        @Override
        public boolean isEnabled() {//cemu sluzi
            return true;
        }

        @Override
        public View getView(Context context, View convertView, ViewGroup parent) {
            return super.getView(context, convertView, parent);
        }

        @Override
        protected int getViewLayoutResId() {
            return R.layout.rezervation;
        }

        @Override
        protected  IViewHolder createViewHolder() {
            return  new RezervationsViewHolder(this);
        }

         @Override
                    public void findViews(View convertView) {
                        time = (TextView)convertView.findViewById(R.id.time);

                        numberTable= (TextView)convertView.findViewById(R.id.numberTable);
                        price= (TextView)convertView.findViewById(R.id.price);
                        itemsOrder = (TextView)convertView.findViewById(R.id.itemsOrder);
                        paidOrNot = (TextView)convertView.findViewById(R.id.paidOrNot);
                        edit  = (Button)convertView.findViewById(R.id.edit);
                        remove = (Button)convertView.findViewById(R.id.remove);
                    }
                    @Override
                    public void fillData(final ItemForRezervationsList adapterItem) {

                        time.setVisibility(View.VISIBLE);
                        time.setText(adapterItem.rezervation.getTime());

                        numberTable.setVisibility(View.VISIBLE);
                        numberTable.setText("Broj stola je : " + adapterItem.rezervation.getnumberTable_string());
                        price.setVisibility(View.VISIBLE);
                        price.setText("Cena je :   "+adapterItem.rezervation.getprice().toString());
                        itemsOrder.setVisibility(View.VISIBLE);
                        itemsOrder.setText(adapterItem.rezervation.getItemsOrdersInString());
                        paidOrNot.setVisibility(View.VISIBLE);
                        paidOrNot.setText(adapterItem.rezervation.getpaidOrNot_string());


                        edit.setVisibility(View.VISIBLE);
                        remove.setVisibility(View.VISIBLE);

                        edit.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //otvori prozor fragment FreagmentAddOrder
                                Intent intent2 = new Intent(context.getApplicationContext(), ActivityHost.class);
                                intent2.putExtra("name", "FreagmentAddOrder");
                                intent2.putExtra("rezervationId", Integer.toString(rezervation.getId()));
                                intent2.putExtra(ActivityDetails.CHOOSEFRAGM , ActivityDetails.ADD_ITEM_MENU) ;
                                intent2.putExtra("action", "onclick");
                                intent2.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                context.getApplicationContext().startActivity(intent2);

                            }
                        });

                        // remove.setOnClickListener(this);
                        remove.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                // AdapterDB.getInstance().deleteRezervation(rezervation.getId());


                                String key = mRezertavionsIds.get(mRezertavions.indexOf(rezervation));
                                mDatabaseReference.child("listaRezervations").child(key).removeValue();

                                deleteItemWithIndex(mRezertavions.indexOf(rezervation));

                                /*
                                FireBase.getInstance().removeRezer(rezervation.getId());
                                MyCustomAdatperForTheList<ItemForRezervationsList> adapter = new MyCustomAdatperForTheList(context));
                                ArrayList<Rezervation> myList = FireBase.getInstance().getRezervationsWithRegulation(UserData.getInstance().getSelecionRegulation());
                                for(Rezervation rez:myList){
                                    adapter.addItem(new ItemForRezervationsList(rez));
                                }
                                lvDetail.setAdapter(adapter);
        */
                                //////////////////

                             ///   FragmentListReservations.this.lvDetail.invalidateViews();


                            }
                        });

                        //////////////////////////////////////////////////////////

                         public class ItemForUsersList extends HolderAdapterItem {

                                //private String time,name_user,numberTable,price,itemsOrder,paidOrNot;
                                // int id;
                                UserInfo userinfo;

                                public ItemForUsersList(UserInfo ld){

                                    userinfo = ld;

                                }
                                @Override
                                public boolean isEnabled() {//cemu sluzi
                                    return true;
                                }

                                @Override
                                public View getView(Context context, View convertView, ViewGroup parent) {
                                    return super.getView(context, convertView, parent);
                                }

                                @Override
                                protected int getViewLayoutResId() {
                                    return R.layout.user_info;
                                }

                                @Override
                                protected  IViewHolder createViewHolder() {
                                    return  new Fragment_List_Users.ItemForUsersList.UserInfoViewHolder(this);
                                }

                                private class UserInfoViewHolder implements IViewHolder<Fragment_List_Users.ItemForUsersList> {
                                    Fragment_List_Users.ItemForUsersList bla;
                                    TextView typeAndnameSurname,username ,password,email, number;
                                    Button edit, remove;


                                    public UserInfoViewHolder(Fragment_List_Users.ItemForUsersList bla) {
                                        this.bla = bla;
                                    }

                                    @Override
                                    public void findViews(View convertView) {
                                        typeAndnameSurname = (TextView)convertView.findViewById(R.id.typAndName);
                                        username= (TextView)convertView.findViewById(R.id.user_name);
                                        password= (TextView)convertView.findViewById(R.id.password);
                                        email= (TextView)convertView.findViewById(R.id.email);
                                        number = (TextView)convertView.findViewById(R.id.number);

                                        edit  = (Button)convertView.findViewById(R.id.edit);
                                        remove = (Button)convertView.findViewById(R.id.remove);
                                    }
                                    @Override
                                    public void fillData(final Fragment_List_Users.ItemForUsersList adapterItem) {

                                        typeAndnameSurname.setVisibility(View.VISIBLE);
                                        //String typeNameSurnameString = adapterItem.userinfo.getType() + " : " + adapterItem.userinfo.getName() + " " + adapterItem.userinfo.getSurname();
                                        //String typeNameSurnameString = adapterItem.userinfo.getStringTypeNameSurnameForListUsers();
                                        String typeNameSurnameString = adapterItem.userinfo.getType() + " : "+adapterItem.userinfo.getName()+ " " +adapterItem.userinfo.getSurname();

                                        typeAndnameSurname.setText(typeNameSurnameString);
                                        username.setVisibility(View.VISIBLE);
                                        username.setText(getString(R.string.username) + " : " + adapterItem.userinfo.getUsername());
                                        password.setVisibility(View.VISIBLE);
                                        password.setText(getString(R.string.password) +" : "+adapterItem.userinfo.getPassword());
                                        email.setVisibility(View.VISIBLE);
                                        email.setText(getString (R.string.email)+" : "+adapterItem.userinfo.getEmail());
                                        number.setVisibility(View.VISIBLE);
                                        number.setText(getString (R.string.number)+" : "+adapterItem.userinfo.getNumber());

                                        edit.setVisibility(View.VISIBLE);
                                        remove.setVisibility(View.VISIBLE);

                                        edit.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                if (getActivity().getClass().equals(ActivityMainList.getInstance().getClass())){

                                                    ((ActivityMainList)getActivity()).callUserInfoForEditUser(adapterItem.userinfo.getUsername(),adapterItem.userinfo.getPassword());
                                                }else {
                                                    Intent intent2 = new Intent(getActivity().getApplicationContext(), ActivityDetails.class);
                                                    intent2.putExtra(ActivityDetails.CHOOSEFRAGM, ActivityDetails.ADD_NEW_USER);
                                                    intent2.putExtra("username", adapterItem.userinfo.getUsername());
                                                    intent2.putExtra("password", adapterItem.userinfo.getPassword());
                                                    intent2.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                                    getActivity().getApplicationContext().startActivity(intent2);
                                                }
                                            }
                                        });


                                        remove.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {


                                                FireBase.getInstance().removeUser(userinfo.getUsername(), userinfo.getPassword());

                                                MyCustomAdatperForTheList<Fragment_List_Users.ItemForUsersList> adapter = new MyCustomAdatperForTheList(getActivity().getBaseContext());
                                                ArrayList<UserInfo> myList = FireBase.getInstance().getUserList();
                                                for(UserInfo rez:myList){
                                                    adapter.addItem(new Fragment_List_Users.ItemForUsersList(rez));
                                                }
                                                listOfUsers.setAdapter(adapter);

                                                //////////////////////////////////////////////////////////////
                                                Fragment_List_Users.this.listOfUsers.invalidateViews();


                                            }
                                        });
                                    }
                                }
                            }




    tools:listitem="@layout/user_info"
    android:layout_marginLeft="@dimen/activity_small_padding"
    android:layout_marginRight="@dimen/activity_small_padding"
    android:listSelector="@android:color/transparent"





     public class ItemForFoodMenuItemsList extends HolderAdapterItem {
            FoodMenuItem rezervation;

            public ItemForFoodMenuItemsList(FoodMenuItem ld){

                rezervation = ld;

            }
            @Override
            public boolean isEnabled() {//cemu sluzi
                return true;
            }

            @Override
            public View getView(Context context, View convertView, ViewGroup parent) {
                return super.getView(context, convertView, parent);
            }

            @Override
            protected int getViewLayoutResId() {
                return R.layout.food_menu_item_layout;
            }

            @Override
            protected  IViewHolder createViewHolder() {
                return  new FoodItemViewHolder(this);
            }

            private class  FoodItemViewHolder implements IViewHolder<ItemForFoodMenuItemsList> {
                ItemForFoodMenuItemsList bla;
                TextView info;
                Button edit, remove;


                public FoodItemViewHolder(ItemForFoodMenuItemsList bla) {
                    this.bla = bla;
                }

                @Override
                public void findViews(View convertView) {
                    info = (TextView)convertView.findViewById(R.id.info);
                    edit  = (Button)convertView.findViewById(R.id.edit);
                    remove = (Button)convertView.findViewById(R.id.remove);

                }
                @Override
                public void fillData(final ItemForFoodMenuItemsList adapterItem) {

                    info.setVisibility(View.VISIBLE);
                    info.setText(adapterItem.rezervation.getFood()+"  \ncena : "+adapterItem.rezervation.getPrice());

                    edit.setVisibility(View.VISIBLE);
                    remove.setVisibility(View.VISIBLE);

                    edit.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            if (getActivity().getClass().equals(ActivityMainList.getInstance().getClass())){

                                ((ActivityMainList)getActivity()).callAddMenuItemForEdtiItemMenu(Integer.toString(rezervation.getId()));
                            }else {
                                //otvori prozor fragment FreagmentAddOrder
                                Intent intent2 = new Intent(getActivity().getApplicationContext(), ActivityDetails.class);
                                intent2.putExtra("foodItemId", Integer.toString(rezervation.getId()));
                                intent2.putExtra(ActivityDetails.CHOOSEFRAGM, ActivityDetails.ADD_ITEM_MENU);
                                intent2.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                getActivity().getApplicationContext().startActivity(intent2);
                            }

                        }
                    });

                    // remove.setOnClickListener(this);
                    remove.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            FireBase.getInstance().removeFootMenuItem(rezervation.getId());

                            MyCustomAdatperForTheList<ItemForFoodMenuItemsList> adapter = new MyCustomAdatperForTheList(getActivity().getBaseContext());
                            ArrayList<FoodMenuItem> myList = FireBase.getInstance().getfoodmenuitemslist();
                            for(FoodMenuItem rez:myList){
                                adapter.addItem(new ItemForFoodMenuItemsList(rez));
                            }
                            lvDetail.setAdapter(adapter);

                            //////////////////
                            lvDetail.invalidateViews();


                        }
                    });
                }
            }
        }


            public class ItemOrder extends HolderAdapterItem {

                private Order order;

                public Order getOrder() {
                    return order;
                }

                public void setOrder(Order order) {
                    this.order = order;
                }

                public ItemOrder(Order order){
                    this.order = order;


                }
                @Override
                public boolean isEnabled() {//cemu sluzi
                    return true;
                }

                @Override
                public View getView(Context context, View convertView, ViewGroup parent) {
                    return super.getView(context, convertView, parent);
                }

                @Override
                protected int getViewLayoutResId() {
                    return R.layout.item_order;
                }

                @Override
                protected  IViewHolder createViewHolder() {
                    return  new OrderViewHolder();
                }

                private class  OrderViewHolder implements IViewHolder<ItemOrder> {
                    TextView  itemOrder,number_item_order;
                    Button  remove;
                    CheckedTextView innewRezervations;


                    @Override
                    public void findViews(View convertView) {
                        itemOrder =(TextView) convertView.findViewById(R.id.item_order);
                        number_item_order =(TextView) convertView.findViewById(R.id.number_item_order);
                        remove = (Button)convertView.findViewById(R.id.remove);
                        innewRezervations =(CheckedTextView) convertView.findViewById(R.id.in_new_order);

                    }
                    @Override
                    public void fillData(final ItemOrder adapterItem) {
                        number_item_order.setVisibility(View.VISIBLE);
                        number_item_order.setText("komada : "+adapterItem.order.getNuberOrder());
                        itemOrder.setVisibility(View.VISIBLE);
                        itemOrder.setText(adapterItem.order.getOrder().getFood());
                        remove.setVisibility(View.VISIBLE);

                        innewRezervations.setVisibility(View.VISIBLE);
                        innewRezervations.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                if(innewRezervations.isChecked()){
                                    innewRezervations.setChecked(false);
                                    ListOrdersForSplitAction.remove(ItemOrder.this);

                                }else{
                                    innewRezervations.setChecked(true);
                                    ListOrdersForSplitAction.add(ItemOrder.this);

                                }

                            }
                        });

                        remove.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                FireBase.getInstance().removeorderForRezer(order, rezervationKeyFireBase);


                                adapter = new MyCustomAdatperForTheList(getActivity());
                                for (Order order: FireBase.getInstance().getListOrders(rezervationKeyFireBase)) {
                                    adapter.addItem(new ItemOrder(order));
                                }
                                listaAddOrder.setAdapter(adapter);
                                ((MyCustomAdatperForTheList<ItemOrder>) listaAddOrder.getAdapter()).notifyDataSetChanged();
                                FreagmentAddOrder.this.listaAddOrder.invalidate();


                            }
                        });



                    }
                }
            }